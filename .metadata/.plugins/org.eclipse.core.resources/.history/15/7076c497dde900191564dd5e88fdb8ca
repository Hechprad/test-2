package br.com.sciensa.corujaoapi.endpoints;


import java.text.Normalizer;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.threeten.bp.OffsetDateTime;

import br.com.sciensa.corujaoapi.model.Artist;
import br.com.sciensa.corujaoapi.repository.ArtistRepository;

@RestController
@RequestMapping("v1")
public class ArtistEndPoint {

	@Autowired
	ArtistRepository repository;
	
    @PostMapping(value = "/artists")
    public ResponseEntity<Artist> addartist(@Valid @RequestBody Artist artist){
    	artist = addCreatedAndUpdated(artist);
    	return new ResponseEntity<Artist>(repository.save(artist), HttpStatus.CREATED);
    };

	@GetMapping(value = "/artists/{artistId}")
    public ResponseEntity<Optional<Artist>> getartist(@PathVariable("artistId") Long artistId){
    	return new ResponseEntity<Optional<Artist>>(repository.findById(artistId), HttpStatus.OK);
    };

    @GetMapping(value = "/artists")
    public ResponseEntity<Page<Artist>> listartists(@Valid @RequestParam(value = "page", required = false, defaultValue="1") Integer page, @Valid @RequestParam(value = "size", required = false, defaultValue="10") Integer size, @Valid @RequestParam(value = "search", required = false) String search, Pageable pageable){
    	if(search != null) { return searchDescription(search,  pageable); }
    	return new ResponseEntity<Page<Artist>>(repository.findAll(pageable), HttpStatus.OK);
    };

    public ResponseEntity<Page<Artist>> searchDescription(String search, Pageable pageable) {
		return new ResponseEntity<Page<Artist>>(buscaArtistPeloNome(search), HttpStatus.OK);
	}
    
    @PutMapping(value = "/artists/{artistId}")
    public ResponseEntity<?> updateartist(@PathVariable("artistId") Long artistId, @Valid @RequestBody Artist artist){
    	return new ResponseEntity<Artist>(update(artistId, artist), HttpStatus.CREATED);
    };
    
    private Page<Artist> buscaArtistPeloNome(String search) {
    	Iterable<Artist> artists = repository.findAll();

		List<Artist> artistsFiltrados = new ArrayList<Artist>();
		artists.forEach(artist -> {
			if (removeAcento(artist.getFirstName() + " " + artist.getLastName()).toLowerCase()
					.contains(removeAcento(search.toLowerCase())))
				artistsFiltrados.add(artist);
		});

		// convertento List para page
		final Page<Artist> page = new PageImpl<>(artistsFiltrados);
		return page;
	}

    private static String removeAcento(String str) {
		str = Normalizer.normalize(str, Normalizer.Form.NFD);
		str = str.replaceAll("[^\\p{ASCII}]", "");
		return str;
	}
    
    private @Valid Artist addCreatedAndUpdated(@Valid Artist artist) {
    	artist.setCreatedAt(OffsetDateTime.now());
		artist.setUpdatedAt(OffsetDateTime.now());
		return artist;
	}

    private Artist update(Long artistId, Artist artist) {
		Optional<Artist> artistWillUpdate = repository.findById(artistId);
		artistWillUpdate.ifPresent(artistOpt -> {
			artistOpt.setFirstName(artist.getFirstName());
			artistOpt.setLastName(artist.getLastName());
			artistOpt.setUpdatedAt(OffsetDateTime.now());
		});
		Artist artistEntity = artistWillUpdate.get();
		artistEntity = repository.save(artistEntity);

		return artistEntity;
	}
}
