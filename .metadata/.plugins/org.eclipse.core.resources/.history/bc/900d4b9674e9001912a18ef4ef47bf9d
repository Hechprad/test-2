package br.com.sciensa.corujaoapi.controller;


import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import br.com.sciensa.corujaoapi.model.Genre;
import br.com.sciensa.corujaoapi.model.ResponseError;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-10-02T14:53:20.805Z")

public interface GenreController {

    @ApiOperation(value = "Cadastra um novo gênero cinematográfico", nickname = "addGenre", notes = "", response = Object.class, tags={ "genres", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Gênero criado com sucesso", response = Object.class),
        @ApiResponse(code = 400, message = "Parâmetros invalidos - client side", response = ResponseError.class),
        @ApiResponse(code = 500, message = "Erro durante a criação - server side", response = ResponseError.class) })
    @RequestMapping(value = "/genres",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Genre> addGenre(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Genre genreEntity);


    @ApiOperation(value = "Detalhe de gênero cinematográfico", nickname = "getGenre", notes = "", response = Object.class, tags={ "genres", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Gênero consultado com sucesso", response = Object.class),
        @ApiResponse(code = 400, message = "Parâmetros invalidos - client side", response = ResponseError.class),
        @ApiResponse(code = 500, message = "Erro durante a criação - server side", response = ResponseError.class) })
    @RequestMapping(value = "/genres/{genreId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Genre> getGenre(@ApiParam(value = "",required=true) @PathVariable("genreId") Long genreId);


    @ApiOperation(value = "Lista os gêneros cinematográficos", nickname = "listGenres", notes = "", response = Object.class, tags={ "genres", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Gêneros consultados com sucesso", response = Object.class),
        @ApiResponse(code = 400, message = "Parâmetros invalidos - client side", response = ResponseError.class),
        @ApiResponse(code = 500, message = "Erro durante a criação - server side", response = ResponseError.class) })
    @RequestMapping(value = "/genres",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Page<GenreEntity>> listGenres(@ApiParam(value = "Página da listagem a ser retornada", defaultValue = "1") @Valid @RequestParam(value = "page", required = false, defaultValue="1") Integer page,@ApiParam(value = "Tamanho da paginação a ser utilizada no request", defaultValue = "10") @Valid @RequestParam(value = "size", required = false, defaultValue="10") Integer size,@ApiParam(value = "Retorna itens cuja descrição se pareça com o valor informado") @Valid @RequestParam(value = "search", required = false) String search, Pageable pageable);


    @ApiOperation(value = "Atualização de gênero cinematográfico", nickname = "updateGenre", notes = "", response = Object.class, tags={ "genres", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Gênero atualizado com sucesso", response = Object.class),
        @ApiResponse(code = 400, message = "Parâmetros invalidos - client side", response = ResponseError.class),
        @ApiResponse(code = 500, message = "Erro durante a criação - server side", response = ResponseError.class) })
    @RequestMapping(value = "/genres/{genreId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<GenreEntity> updateGenre(@ApiParam(value = "",required=true) @PathVariable("genreId") Long genreId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody GenreEntity genreEntity);

}
